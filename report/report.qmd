---
title: "NDS-BR e velocidades inseguras em vias urbanas"
subtitle: "Análise quantitativa"
author: Pedro Augusto Borges dos Santos
date: last-modified
# cap-location: margin
format: html
number-sections: true
lang: pt-BR
code-fold: true
code-line-numbers: true
execute:
    warning: false
    message: false
editor_options: 
  chunk_output_type: console
---

# Introdução

```{python}
#| label: setup

import pandas as pd
import geopandas as gpd
import numpy as np
from plotnine import *
import matplotlib.pyplot as plt
import random
```

# Dados do NDS-BR

Para o cálculo da distribuição da velocidade nas vias de Curitiba, utilizou-se os dados do NDS-BR, que apresentam os dados de velocidade instantânea e a localização. O bloco a seguir apresenta a leitura dos dados e as colunas que identificam os condutores, as viagens, o local e a velocidade praticada.

```{python}
#| tbl-cap: "Amostra do NDSBR"
#| label: tbl-ndsbr

nds_path = "../data/ndsbr_full.parquet"
ndsbr_sample = pd.read_parquet(nds_path)
cols = ['driver', 'trip', 'long', 'lat', 'spd_kmh']
ndsbr_sample[cols].head(n=10)
```

## Amostra utilizada

```{python}
#| label: sample-calc

n_drivers = ndsbr_sample['driver'].nunique()
driven_hours = len(ndsbr_sample) / 3600
n_trips = ndsbr_sample['id'].nunique()

trip_per_driver = ndsbr_sample.groupby('driver')['trip'].nunique()
min_trip = trip_per_driver.min()
max_trip = trip_per_driver.max()
mean_trip = trip_per_driver.mean()

first_trip = ndsbr_sample['date'].dropna().min()
last_trip = ndsbr_sample['date'].dropna().max()
```

```{python}
#| label: dist-calc

ndsbr_geo = gpd.GeoDataFrame(
    ndsbr_sample, 
    geometry=gpd.points_from_xy(ndsbr_sample['long'], ndsbr_sample['lat'],
    crs = 'epsg:4326')
)

ndsbr_geo_utm = ndsbr_geo.to_crs('31982')
dist_between_points = ndsbr_geo_utm.distance(ndsbr_geo_utm.shift(-1))

ndsbr_dist = pd.concat(
    [ndsbr_geo_utm, dist_between_points],
    axis=1
).reset_index(drop=True)

ndsbr_dist.rename(columns={0:'dist'}, inplace=True)

ndsbr_dist['time'] = pd.to_datetime(ndsbr_dist['time'], format = '%H:%M:%S')
ndsbr_dist['delta_time'] = ndsbr_dist['time'] - ndsbr_dist['time'].shift(1)
ndsbr_dist['delta_time'] = ndsbr_dist['delta_time'].apply(
    lambda x: x.total_seconds()
)

ndsbr_valid_dist = ndsbr_dist.query('delta_time == 1')
total_dist = ndsbr_valid_dist['dist'].sum() / 1000
```

A amostra do NDS-BR inclui `{python} n_drivers` condutores, com `{python} f'{driven_hours:.2f}'` horas de viagem ao total. Todos os condutores fizeram `{python} n_trips` viagens. A quantidade mínima de viagens por condutor foi `{python} f'{min_trip:.0f}'` e a máxima foi `{python} f'{max_trip: .0f}'`. A média das viagens por condutor foi `{python} f'{mean_trip: .0f}'`. A distância percorrida por todos os condutores na amostra foi de `{python} f'{total_dist:.2f}'` km. Em média, cada condutor percorreu `{python} f'{total_dist / n_drivers:.2f}'` km.

## Distribuição da velocidade praticada

Como observado na @fig-hist-vel, boa parte das velocidades praticadas dentro da amostra estão abaixo da velocidade de 5 km/h, incluindo os momentos em que os veículos também estavam parados no trânsito (0 km/h). Outros grupos que se destacam são aqueles entre 30 e 40 km/h.

```{python}
#| label: fig-hist-vel
#| fig-cap: "Distribuição da velocidade praticada"

(
    ggplot(ndsbr_sample, aes(x='spd_kmh'))
    + geom_histogram(binwidth=10, fill='#00496d', color='grey')
    + labs(
        x='Velocidade (km/h)',
        y='Tempo de viagem (seg)'
    )
    + theme_bw()
    + scale_x_continuous(breaks=np.arange(0, 160, 10))
)
```

Ao considerar as velocidades maiores que 5 km/h, a distribuição da velocidade praticada fica com uma curva mais concentrada, conforme demonstrado em @fig-hist-vel-filter. Para os cálculos seguintes deste trabalho, serão consideradas apenas as velocidades acima de 5 km/h

```{python}
#| label: fig-hist-vel-filter
#| fig-cap: "Distribuição da velocidade praticada acima de 0 km/h"
#| fig-dpi: 300

ndsbr_valid_speed = ndsbr_geo_utm.query('spd_kmh > 5')

(
    ggplot(ndsbr_valid_speed, aes(x = 'spd_kmh'))
    + geom_histogram(binwidth = 10, fill = '#00496d', color = 'grey')
    + labs(
        x = 'Velocidade (km/h)',
        y = 'Tempo de viagem (seg)'
    )
    + theme_bw()
    + scale_x_continuous(breaks = np.arange(0, 160, 10))
)

```

# Velocidades nas vias de Curitiba

O processo de cálculo das velocidades nas vias de Curitiba inicia com a importação dos eixos de via, fornecidos pelo IPPUC^[https://ippuc.org.br/geodownloads/SHAPES_SIRGAS/EIXO_RUA_SIRGAS.zip]. A @fig-vias apresenta um mapa dessas vias.

```{python}
#| label: import-vias

vias_url = 'https://ippuc.org.br/geodownloads/SHAPES_SIRGAS/EIXO_RUA_SIRGAS.zip'
vias = gpd.read_file(vias_url, encoding='latin1')
```

```{python}
#| label: fig-vias
#| fig-cap: "Mapa das vias de Curitiba"

(
    ggplot(vias)
    + geom_map(color = '#00496d', size = 0.3)
    + theme_bw()
    + coord_equal()
)
```

```{python}
#| label: calc-extensao

# Calculate the extension of the network using geopandas
dist_vias = vias.length.sum() / 1000

ndsbr_nearest = gpd.sjoin_nearest(
    ndsbr_valid_speed, 
    vias, 
    how='left',
    max_distance=20
)

v85_spd = ndsbr_nearest.groupby('CHAVE')['spd_kmh'].quantile(0.85).reset_index()
vias_v85 = pd.merge(vias, v85_spd, how='left', on='CHAVE')

# Filter vias_v85 where spd_kmh is not NaN
vias_v85_valid = vias_v85.dropna(subset=['spd_kmh'])
dist_vias_sample = vias_v85_valid.length.sum() / 1000
```

A malha de eixos viários de Curitiba apresenta uma extensão total de `{python} f'{dist_vias:.2f}'` km. Ao considerar apenas as vias com a amostra do NDS-BR em velocidades acima de 5 km/h, a extensão das vias de Curitiba fica de `{python} f'{dist_vias_sample:.2f}'` km. A @fig-vias-v85 apresenta a incidência de V85 nas vias de Curitiba. Pouco mais de 700 km de vias de Curitiba apresentam V85 entre 40 e 50 km/h, sendo o intervalo com o maior valor. 

```{python}
#| label: calc-v85-dist

# Transform spd_kmh into discrete values
vias_v85_valid['spd_kmh_cat'] = pd.cut(
    vias_v85_valid['spd_kmh'], 
    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120],
    labels=[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]
)

vias_v85_valid['dist'] = vias_v85_valid.geometry.length

tbl_v85_dist = vias_v85_valid.groupby('spd_kmh_cat')['dist'].sum() / 1000
tbl_v85_dist = tbl_v85_dist.to_frame().reset_index()
tbl_v85_dist['dist'] = tbl_v85_dist['dist'].astype('float')

```


```{python}
#| label: fig-vias-v85
#| fig-cap: "V85 nas vias de Curitiba"

(
    ggplot(vias_v85)
    + geom_map(color='#dbdbdb', size=0.3)
    + geom_map(vias_v85_valid, aes(color = 'spd_kmh'), size=0.4)
    + theme_bw()
    + coord_equal()
    + labs(color = 'Velocidade (km/h)')
)
```

Por fim, a @fig-recorte-hierarquia apresenta as vias locais, coletoras e arteriais, que serão utilizadas como amostra do estudo. Ao remover as vias de trânsito rápido, resta uma extensão de 1995.78 quilômetros de vias. 

```{python}
#| label: fig-recorte-hierarquia
#| fig-cap: "Recorte de hierarquia"

mask = vias_v85_valid['HIERARQUIA'].isin(
    ['2', '3', '4']
)

vias_valid_hierarquia = vias_v85_valid[mask]

(
    ggplot(vias_v85)
    + geom_map(color='#dbdbdb', size=0.3)
    + geom_map(vias_valid_hierarquia, color='#00496d', size=0.4)
    + theme_bw()
    + coord_equal()
)
```

```{python}
#| label: fig-hierarquia
#| fig-cap: "Distribuição de V85"

(
    ggplot(vias_valid_hierarquia)
    + geom_histogram(
        aes(x='spd_kmh'),
        binwidth=5, 
        fill='#00496d', 
        color='grey'
    )
    + labs(x='Velocidade (km/h)', y='Quantidade de trechos de vias')
    + theme_bw()
    + scale_x_continuous(breaks=np.arange(0, 130, 10))
)
```

```{python}
#| label: fig-hierarquia-dist
#| fig-cap: "Distribuição de V85 por hierarquia"

(
    ggplot(vias_valid_hierarquia)
    + geom_density(aes(x='spd_kmh'), fill='#00496d', alpha=0.70)
    + theme_bw()
    + facet_grid(rows='HIERARQUIA')
    + scale_x_continuous(limits=[0, 90], breaks=np.arange(0, 90, 10))
    + labs(x='V85 (km/h)')
)
```

# Fiscalização eletrônica

- Quantidade de radares por tipo
- Mapeamento dos radares

```{python}
#| label: radares

radar_path = '../data/radar.geojson'
radar = gpd.read_file(radar_path)
radar_utm = radar.to_crs(31982).dropna()
```

```{python}
#| label: radar-tipo
#| fig-cap: "Radares por tipo"

(
    ggplot(vias)
    + geom_map(color='#bcbcbc', size=0.3)
    + geom_map(radar_utm, aes(color='tipo'), size=1.5, shape='o', fill=None)
    + theme_bw()
    + coord_equal()
    + labs(color = 'Tipo')
    + scale_color_manual(values=['#00496d', '#f05f22'])
)

```

```{python}
#| label: radar-vel
#| fig-cap: "Radares de controle de velocidade"

radar_vel = radar_utm.query('tipo == "Controlador" & ctrl_vel == 1')

(
    ggplot(vias)
    + geom_map(color='#bcbcbc', size=0.3)
    + geom_map(radar_vel, color='#00496d', size=1.5, shape='o', fill=None)
    + theme_bw()
    + coord_equal()
    + labs(color = 'Tipo')
)

```

# Análise combinada da velocidade com os radares

- Existe uma diferença significativa de v85 entre as vias que tem radar e as que não tem radar?
- Quais trechos de via deveriam ter radar e não tem?
- Regressão logística
    - Presença de radar x velocidade v85
    - Igualizar a amostra entre as classes (com e sem radar)

- Comparação: 
    - via de alta velocidade com radar x via de alta velocidade sem radar
    - via de baixa velocidade com radar x via de baixa velocidade sem radar
    - Limiar da velocidade insegura: 40 km/h




```{python}
radar_vias = gpd.sjoin_nearest(
    radar_vel,
    vias_valid_hierarquia[['CHAVE', 'geometry']],
    how='left',
    max_distance=20
).dropna()

radar_vias_count = radar_vias['CHAVE'].value_counts().to_frame().reset_index()

# if count > 1, presenca_radar is true
radar_vias_count['presenca_radar'] = radar_vias_count['count'].apply(
    lambda x: True if x >= 1 else False
)

vias_radares = pd.merge(
    vias_valid_hierarquia,
    radar_vias_count,
    how='left',
    on='CHAVE'
)

vias_radares['presenca_radar'] = vias_radares['presenca_radar'].fillna(False)
```


```{python}
#| label: fig-radar-boxplot
#| fig-cap: "Presença de radar x velocidade v85"

random.seed(123)

n_com_radar = vias_radares.query('presenca_radar == True').shape[0]

# Criar um df só com vias com radar
vias_com_radar = vias_radares.query('presenca_radar == True')

# Criar uma amostra aleatoria só de vias sem radar
vias_sem_radar = vias_radares.query(
    'presenca_radar == False'
).sample(n_com_radar)

# Unir as amostras
vias_radares_sample = pd.concat([vias_com_radar, vias_sem_radar])

(
    ggplot(vias_radares_sample, aes(x='presenca_radar', y='spd_kmh'))
    + geom_boxplot(aes(fill='presenca_radar'))
    + theme_bw()
    + labs(
        x='Presença de radar',
        y='V85 (km/h)',
        caption=f'Amostra equalizada entre as classes (n = {n_com_radar})'
    )
    + theme(legend_position='none')
)

```


```{python}
#| label: fig-radar-map-vias
#| fig-cap: "Trechos de vias com radares"

(
    ggplot()
    + geom_map(
        vias_radares,
        aes(color='presenca_radar', fill='presenca_radar'),
        size=0.5
    )
    + theme_bw()
    + labs(color='Presença de radar', fill='Presença de radar')
    + coord_equal()
    + scale_color_manual(values=['#e1e1e1', '#00496d'])
    + scale_fill_manual(values=['#e1e1e1', '#00496d'])
)
```


```{python}
# Creating a new variable based on presenca_radar and spd_kmh
vias_radares['tipo_spd'] = vias_radares.apply(
    lambda x: 'segura' if x['spd_kmh'] < 40 else 'insegura', axis=1
)
```


```{python}
n_radar_seguro = vias_radares.query('presenca_radar == True & tipo_spd == "segura"').shape[0]

# Criar um df só com vias com radar
vias_com_radar_seguro = vias_radares.query('presenca_radar == True & tipo_spd == "segura"')

# Criar uma amostra aleatoria só de vias sem radar
random.seed(42)

vias_sem_radar_seguro = vias_radares.query(
    'presenca_radar == False & tipo_spd == "segura"'
).sample(n_radar_seguro)

# Unir as amostras
vias_seguro_sample = pd.concat([vias_com_radar_seguro, vias_sem_radar_seguro])


(
    ggplot(vias_seguro_sample)
    + geom_boxplot(aes(x='presenca_radar', y='spd_kmh'))
    + theme_bw()
    + labs(x='Presença de radar', y='V85 (km/h)', caption=f'Amostra equalizada entre as classes (n={n_radar_seguro})')
)
```

```{python}
(
    ggplot(vias_radares.query('tipo_spd == "insegura"'))
    + geom_boxplot(aes(x='presenca_radar', y='spd_kmh'))
    + theme_bw()
    + labs(x='Presença de radar', y='V85 (km/h)')
)
```


```{python}
#| layout-ncol: 3
def filter_vias_semradar(df: pd.DataFrame, n: int) -> pd.DataFrame:
    df = df.query(f'presenca_radar == False & spd_kmh > {n}')
    return df

```


```{python}
fig, ax = plt.subplots(1, 3, figsize=(12, 6))
vias.plot(ax=ax[0], color='#dbdbdb', linewidth=0.3)
vias.plot(ax=ax[1], color='#dbdbdb', linewidth=0.3)
vias.plot(ax=ax[2], color='#dbdbdb', linewidth=0.3)
filter_vias_semradar(vias_radares, 40).plot(ax=ax[0], color='#f05f22', linewidth=0.4)
filter_vias_semradar(vias_radares, 50).plot(ax=ax[1], color='#f05f22', linewidth=0.4)
filter_vias_semradar(vias_radares, 60).plot(ax=ax[2], color='#f05f22', linewidth=0.4)
ax[0].set_title('V85 > 40 km/h')
ax[1].set_title('V85 > 50 km/h')
ax[2].set_title('V85 > 60 km/h')
plt.show()

```